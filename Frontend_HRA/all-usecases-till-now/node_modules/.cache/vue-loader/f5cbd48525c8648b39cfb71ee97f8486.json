{"remainingRequest":"/home/akshaya/Documents/projects/HRA-frontend-app/all-usecases-till-now/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/akshaya/Documents/projects/HRA-frontend-app/all-usecases-till-now/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/akshaya/Documents/projects/HRA-frontend-app/all-usecases-till-now/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/akshaya/Documents/projects/HRA-frontend-app/all-usecases-till-now/src/components/userdashboard/editform/editproperty.vue?vue&type=template&id=68cc3f3a&","dependencies":[{"path":"/home/akshaya/Documents/projects/HRA-frontend-app/all-usecases-till-now/src/components/userdashboard/editform/editproperty.vue","mtime":1541835170092},{"path":"/home/akshaya/Documents/projects/HRA-frontend-app/all-usecases-till-now/node_modules/cache-loader/dist/cjs.js","mtime":1541837368340},{"path":"/home/akshaya/Documents/projects/HRA-frontend-app/all-usecases-till-now/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/akshaya/Documents/projects/HRA-frontend-app/all-usecases-till-now/node_modules/cache-loader/dist/cjs.js","mtime":1541837368340},{"path":"/home/akshaya/Documents/projects/HRA-frontend-app/all-usecases-till-now/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\"div\", [\n    _c(\"div\", { attrs: { id: \"form1\" } }, [\n      _vm._m(0),\n      _c(\"div\", { staticClass: \"mainfomlayout\" }, [\n        _c(\"br\", { staticClass: \"hidden-xs\" }),\n        _c(\n          \"form\",\n          {\n            staticClass: \" \",\n            on: {\n              submit: function($event) {\n                $event.preventDefault()\n                return _vm.validateBeforeSubmit($event)\n              }\n            }\n          },\n          [\n            _c(\"div\", { staticClass: \"hrafom1\" }, [\n              _c(\"h4\", { staticStyle: { margin: \"0px 15px 20px\" } }, [\n                _vm._v(\"Property rent details\")\n              ]),\n              _c(\"div\", { staticClass: \"row marzero0\" }, [\n                _c(\"div\", { staticClass: \"col-sm-6\" }, [\n                  _c(\"div\", { staticClass: \"form-group custrespformgrop\" }, [\n                    _c(\"label\", { staticClass: \"lblcustm\" }, [\n                      _vm._v(\"Property name :\")\n                    ]),\n                    _c(\"p\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model.trim\",\n                            value: _vm.property.Property_name,\n                            expression: \"property.Property_name\",\n                            modifiers: { trim: true }\n                          },\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: {\n                              required: true,\n                              regex: /^[A-za-z0-9\\s\\-\\/]+$/\n                            },\n                            expression:\n                              \"{ required: true, regex: /^[A-za-z0-9\\\\s\\\\-\\\\/]+$/ }\"\n                          }\n                        ],\n                        staticClass: \"form-control step_1\",\n                        class: { invalid: _vm.errors.has(\"Property name\") },\n                        attrs: {\n                          \"data-vv-validate-on\": \"blur\",\n                          name: \"Property name\",\n                          type: \"text\"\n                        },\n                        domProps: { value: _vm.property.Property_name },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.property,\n                              \"Property_name\",\n                              $event.target.value.trim()\n                            )\n                          },\n                          blur: function($event) {\n                            _vm.$forceUpdate()\n                          }\n                        }\n                      }),\n                      _c(\n                        \"span\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value: _vm.errors.has(\"Property name\"),\n                              expression: \"errors.has('Property name')\"\n                            }\n                          ],\n                          staticClass: \"errormsg\"\n                        },\n                        [_vm._v(_vm._s(_vm.errors.first(\"Property name\")))]\n                      )\n                    ])\n                  ])\n                ]),\n                _c(\"div\", { staticClass: \"col-sm-6\" }, [\n                  _c(\"div\", { staticClass: \"form-group custrespformgrop\" }, [\n                    _c(\"label\", { staticClass: \"lblcustm\" }, [\n                      _vm._v(\"Security Deposit Amount:\")\n                    ]),\n                    _c(\"p\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model.trim\",\n                            value: _vm.property.Security_deposit_amount,\n                            expression: \"property.Security_deposit_amount\",\n                            modifiers: { trim: true }\n                          },\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: \"required|numeric\",\n                            expression: \"'required|numeric'\"\n                          }\n                        ],\n                        staticClass: \"form-control step_1\",\n                        class: { invalid: _vm.errors.has(\"Securitydeposit\") },\n                        attrs: {\n                          \"data-vv-validate-on\": \"blur\",\n                          name: \"Securitydeposit\",\n                          type: \"text\"\n                        },\n                        domProps: {\n                          value: _vm.property.Security_deposit_amount\n                        },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.property,\n                              \"Security_deposit_amount\",\n                              $event.target.value.trim()\n                            )\n                          },\n                          blur: function($event) {\n                            _vm.$forceUpdate()\n                          }\n                        }\n                      }),\n                      _c(\n                        \"span\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value: _vm.errors.has(\"Securitydeposit\"),\n                              expression: \"errors.has('Securitydeposit')\"\n                            }\n                          ],\n                          staticClass: \"errormsg\"\n                        },\n                        [_vm._v(_vm._s(_vm.errors.first(\"Securitydeposit\")))]\n                      )\n                    ])\n                  ])\n                ])\n              ]),\n              _c(\"div\", { staticClass: \"row marzero0\" }, [\n                _c(\"div\", { staticClass: \"col-sm-6\" }, [\n                  _c(\"div\", { staticClass: \"form-group custrespformgrop\" }, [\n                    _c(\"label\", { staticClass: \"lblcustm\" }, [\n                      _vm._v(\"Rent amount\")\n                    ]),\n                    _c(\"p\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model.trim\",\n                            value: _vm.property.Rent_amount,\n                            expression: \"property.Rent_amount\",\n                            modifiers: { trim: true }\n                          },\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: \"required|numeric\",\n                            expression: \"'required|numeric'\"\n                          }\n                        ],\n                        staticClass: \"form-control step_1\",\n                        class: { invalid: _vm.errors.has(\"Rent amount\") },\n                        attrs: {\n                          \"data-vv-validate-on\": \"blur\",\n                          name: \"Rent amount\",\n                          type: \"text\"\n                        },\n                        domProps: { value: _vm.property.Rent_amount },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.property,\n                              \"Rent_amount\",\n                              $event.target.value.trim()\n                            )\n                          },\n                          blur: function($event) {\n                            _vm.$forceUpdate()\n                          }\n                        }\n                      }),\n                      _c(\n                        \"span\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value: _vm.errors.has(\"Rent amount\"),\n                              expression: \"errors.has('Rent amount')\"\n                            }\n                          ],\n                          staticClass: \"errormsg\"\n                        },\n                        [\n                          _vm._v(\n                            _vm._s(_vm.errors.first(\"Rent amount\")) +\n                              \"\\n\\n                          \"\n                          )\n                        ]\n                      )\n                    ])\n                  ])\n                ]),\n                _c(\"div\", { staticClass: \"col-sm-6\" }, [\n                  _c(\"div\", { staticClass: \"form-group custrespformgrop\" }, [\n                    _c(\"label\", { staticClass: \"lblcustm\" }, [\n                      _vm._v(\"Maintenace amount\")\n                    ]),\n                    _c(\"p\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model.trim\",\n                            value: _vm.property.Maintenance_amount,\n                            expression: \"property.Maintenance_amount\",\n                            modifiers: { trim: true }\n                          },\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: \"required|numeric\",\n                            expression: \"'required|numeric'\"\n                          }\n                        ],\n                        staticClass: \"form-control step_1\",\n                        class: {\n                          invalid: _vm.errors.has(\"Maintenance amount\")\n                        },\n                        attrs: {\n                          \"data-vv-validate-on\": \"blur\",\n                          name: \"Maintenance amount\",\n                          type: \"text\"\n                        },\n                        domProps: { value: _vm.property.Maintenance_amount },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.property,\n                              \"Maintenance_amount\",\n                              $event.target.value.trim()\n                            )\n                          },\n                          blur: function($event) {\n                            _vm.$forceUpdate()\n                          }\n                        }\n                      }),\n                      _c(\n                        \"span\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value: _vm.errors.has(\"Maintenance amount\"),\n                              expression: \"errors.has('Maintenance amount')\"\n                            }\n                          ],\n                          staticClass: \"errormsg\"\n                        },\n                        [_vm._v(_vm._s(_vm.errors.first(\"Maintenance amount\")))]\n                      )\n                    ])\n                  ])\n                ])\n              ]),\n              _c(\"div\", { staticClass: \"row marzero0\" }, [\n                _c(\"div\", { staticClass: \"col-sm-6\" }, [\n                  _c(\"div\", { staticClass: \"form-group custrespformgrop\" }, [\n                    _c(\"label\", { staticClass: \"lblcustm\" }, [\n                      _vm._v(\"Rent due date\")\n                    ]),\n                    _c(\"p\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model.trim\",\n                            value: _vm.property.Rent_due_date,\n                            expression: \"property.Rent_due_date\",\n                            modifiers: { trim: true }\n                          },\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: \"required|integer|max_value:31|min_value:1\",\n                            expression:\n                              \"'required|integer|max_value:31|min_value:1'\"\n                          }\n                        ],\n                        staticClass: \"form-control step_1\",\n                        class: { invalid: _vm.errors.has(\"Rent due date\") },\n                        attrs: {\n                          \"data-vv-validate-on\": \"blur\",\n                          placeholder: \"DD\",\n                          name: \"Rent due date\",\n                          type: \"text\"\n                        },\n                        domProps: { value: _vm.property.Rent_due_date },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.property,\n                              \"Rent_due_date\",\n                              $event.target.value.trim()\n                            )\n                          },\n                          blur: function($event) {\n                            _vm.$forceUpdate()\n                          }\n                        }\n                      }),\n                      _c(\n                        \"span\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value: _vm.errors.has(\"Rent due date\"),\n                              expression: \"errors.has('Rent due date')\"\n                            }\n                          ],\n                          staticClass: \"errormsg\"\n                        },\n                        [_vm._v(_vm._s(_vm.errors.first(\"Rent due date\")))]\n                      )\n                    ])\n                  ])\n                ]),\n                _c(\"div\", { staticClass: \"col-sm-6\" }, [\n                  _c(\"div\", { staticClass: \"form-group custrespformgrop\" }, [\n                    _c(\"label\", { staticClass: \"lblcustm\" }, [\n                      _vm._v(\"Maintenace due date\")\n                    ]),\n                    _c(\"p\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model.trim\",\n                            value: _vm.property.Maintenance_due_date,\n                            expression: \"property.Maintenance_due_date\",\n                            modifiers: { trim: true }\n                          },\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: \"required|integer|max_value:31|min_value:1\",\n                            expression:\n                              \"'required|integer|max_value:31|min_value:1'\"\n                          }\n                        ],\n                        staticClass: \"form-control step_1\",\n                        class: {\n                          invalid: _vm.errors.has(\"Maintenance due date\")\n                        },\n                        attrs: {\n                          \"data-vv-validate-on\": \"blur\",\n                          placeholder: \"DD\",\n                          name: \"Maintenance due date\",\n                          type: \"text\"\n                        },\n                        domProps: { value: _vm.property.Maintenance_due_date },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.property,\n                              \"Maintenance_due_date\",\n                              $event.target.value.trim()\n                            )\n                          },\n                          blur: function($event) {\n                            _vm.$forceUpdate()\n                          }\n                        }\n                      }),\n                      _c(\n                        \"span\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value: _vm.errors.has(\"Maintenance due date\"),\n                              expression: \"errors.has('Maintenance due date')\"\n                            }\n                          ],\n                          staticClass: \"errormsg\"\n                        },\n                        [\n                          _vm._v(\n                            _vm._s(_vm.errors.first(\"Maintenance due date\"))\n                          )\n                        ]\n                      )\n                    ])\n                  ])\n                ])\n              ]),\n              _c(\"div\", { staticClass: \"row marzero0\" }, [\n                _c(\"div\", { staticClass: \"col-sm-6\" }, [\n                  _c(\"div\", { staticClass: \"form-group custrespformgrop\" }, [\n                    _c(\"label\", { staticClass: \"lblcustm\" }, [\n                      _vm._v(\"Staying since\")\n                    ]),\n                    _c(\"p\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model.trim\",\n                            value: _vm.property.Staying_since,\n                            expression: \"property.Staying_since\",\n                            modifiers: { trim: true }\n                          },\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: \"required|date_format:DD/MM/YYYY|notfuture\",\n                            expression:\n                              \"'required|date_format:DD/MM/YYYY|notfuture'\"\n                          }\n                        ],\n                        staticClass: \"form-control step_1\",\n                        class: { invalid: _vm.errors.has(\"Staying since\") },\n                        attrs: {\n                          \"data-vv-validate-on\": \"blur\",\n                          placeholder: \"DD/MM/YYYY\",\n                          name: \"Staying since\",\n                          type: \"date\"\n                        },\n                        domProps: { value: _vm.property.Staying_since },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.property,\n                              \"Staying_since\",\n                              $event.target.value.trim()\n                            )\n                          },\n                          blur: function($event) {\n                            _vm.$forceUpdate()\n                          }\n                        }\n                      }),\n                      _c(\n                        \"span\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value: _vm.errors.has(\"Staying since\"),\n                              expression: \"errors.has('Staying since')\"\n                            }\n                          ],\n                          staticClass: \"errormsg\"\n                        },\n                        [_vm._v(_vm._s(_vm.errors.first(\"Staying since\")))]\n                      )\n                    ])\n                  ])\n                ]),\n                _c(\"div\", { staticClass: \"col-sm-6\" }, [\n                  _c(\"div\", { staticClass: \"form-group custrespformgrop\" }, [\n                    _c(\"br\"),\n                    _c(\"label\", { staticClass: \"lblcustm\" }, [\n                      _vm._v(\"Are you paid security deposit?\")\n                    ]),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.property.deposit,\n                          expression: \"property.deposit\"\n                        }\n                      ],\n                      attrs: {\n                        type: \"radio\",\n                        id: \"sec1\",\n                        name: \"deposit\",\n                        value: \"Yes\"\n                      },\n                      domProps: {\n                        checked: _vm._q(_vm.property.deposit, \"Yes\")\n                      },\n                      on: {\n                        change: [\n                          function($event) {\n                            _vm.$set(_vm.property, \"deposit\", \"Yes\")\n                          },\n                          _vm.submit1\n                        ]\n                      }\n                    }),\n                    _vm._m(1),\n                    _c(\"input\", {\n                      directives: [\n                        {\n                          name: \"model\",\n                          rawName: \"v-model\",\n                          value: _vm.property.deposit,\n                          expression: \"property.deposit\"\n                        }\n                      ],\n                      attrs: {\n                        type: \"radio\",\n                        id: \"sec2\",\n                        name: \"deposit\",\n                        value: \"No\"\n                      },\n                      domProps: { checked: _vm._q(_vm.property.deposit, \"No\") },\n                      on: {\n                        change: [\n                          function($event) {\n                            _vm.$set(_vm.property, \"deposit\", \"No\")\n                          },\n                          _vm.submit2\n                        ]\n                      }\n                    }),\n                    _vm._m(2)\n                  ])\n                ])\n              ]),\n              _c(\"div\", { staticClass: \"row marzero0\" }, [\n                _c(\"div\", { staticClass: \"col-sm-6\" }, [\n                  _c(\"div\", { staticClass: \"form-group custrespformgrop\" }, [\n                    _c(\"label\", { staticClass: \"lblcustm\" }, [\n                      _vm._v(\"Upload property image \")\n                    ]),\n                    _c(\"div\", { staticClass: \"file-drop-area\" }, [\n                      _vm._m(3),\n                      _c(\"input\", {\n                        staticClass: \"file-input\",\n                        attrs: { type: \"file\" },\n                        on: { change: _vm.onFileChange }\n                      })\n                    ]),\n                    _c(\n                      \"div\",\n                      {\n                        directives: [\n                          {\n                            name: \"show\",\n                            rawName: \"v-show\",\n                            value: _vm.imageUpload === 1,\n                            expression: \"imageUpload===1\"\n                          }\n                        ]\n                      },\n                      [_vm._m(4)]\n                    ),\n                    _c(\n                      \"div\",\n                      {\n                        directives: [\n                          {\n                            name: \"show\",\n                            rawName: \"v-show\",\n                            value: _vm.filevalid == false,\n                            expression: \"filevalid==false\"\n                          }\n                        ],\n                        staticClass: \"errormsg\"\n                      },\n                      [\n                        _c(\"b\", [\n                          _vm._v(\"File uploaded has exceeded size limit \")\n                        ])\n                      ]\n                    ),\n                    _c(\n                      \"div\",\n                      {\n                        directives: [\n                          {\n                            name: \"show\",\n                            rawName: \"v-show\",\n                            value: _vm.filevalid_format == false,\n                            expression: \"filevalid_format==false\"\n                          }\n                        ],\n                        staticClass: \"errormsg\"\n                      },\n                      [\n                        _c(\"b\", [\n                          _vm._v(\n                            \"File uploaded is not of the format jpg/png/pdf/jpeg\"\n                          )\n                        ])\n                      ]\n                    ),\n                    _c(\"small\", [\n                      _vm._v(\"jpg/png/pdf files with a size less than 500kb\")\n                    ])\n                  ])\n                ])\n              ]),\n              _c(\"h4\", { staticStyle: { margin: \"0px 15px 20px\" } }, [\n                _vm._v(\"Address details\")\n              ]),\n              _c(\"div\", { staticClass: \"row marzero0\" }, [\n                _c(\"div\", { staticClass: \"col-sm-6\" }, [\n                  _c(\"div\", { staticClass: \"form-group custrespformgrop\" }, [\n                    _c(\"label\", { staticClass: \"lblcustm\" }, [\n                      _vm._v(\"Door number\")\n                    ]),\n                    _c(\"p\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model.trim\",\n                            value: _vm.property.Door_number,\n                            expression: \"property.Door_number\",\n                            modifiers: { trim: true }\n                          },\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: {\n                              required: true,\n                              regex: /^[A-za-z0-9\\s\\-\\/]+$/\n                            },\n                            expression:\n                              \"{ required: true, regex: /^[A-za-z0-9\\\\s\\\\-\\\\/]+$/ }\"\n                          }\n                        ],\n                        staticClass: \"form-control step_1\",\n                        class: { invalid: _vm.errors.has(\"Door number\") },\n                        attrs: {\n                          \"data-vv-validate-on\": \"blur\",\n                          name: \"Door number\",\n                          type: \"text\"\n                        },\n                        domProps: { value: _vm.property.Door_number },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.property,\n                              \"Door_number\",\n                              $event.target.value.trim()\n                            )\n                          },\n                          blur: function($event) {\n                            _vm.$forceUpdate()\n                          }\n                        }\n                      }),\n                      _c(\n                        \"span\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value: _vm.errors.has(\"Door number\"),\n                              expression: \"errors.has('Door number')\"\n                            }\n                          ],\n                          staticClass: \"errormsg\"\n                        },\n                        [_vm._v(_vm._s(_vm.errors.first(\"Door number\")))]\n                      )\n                    ])\n                  ])\n                ]),\n                _c(\"div\", { staticClass: \"col-sm-6\" }, [\n                  _c(\"div\", { staticClass: \"form-group custrespformgrop\" }, [\n                    _c(\"label\", { staticClass: \"lblcustm\" }, [\n                      _vm._v(\"Society\")\n                    ]),\n                    _c(\"p\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model.trim\",\n                            value: _vm.property.Society,\n                            expression: \"property.Society\",\n                            modifiers: { trim: true }\n                          },\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: {\n                              required: true,\n                              regex: /^[A-za-z0-9\\s\\-\\/]+$/\n                            },\n                            expression:\n                              \"{ required: true, regex: /^[A-za-z0-9\\\\s\\\\-\\\\/]+$/ }\"\n                          }\n                        ],\n                        staticClass: \"form-control step_1\",\n                        class: { invalid: _vm.errors.has(\"Society\") },\n                        attrs: {\n                          \"data-vv-validate-on\": \"blur\",\n                          name: \"Society\",\n                          type: \"text\"\n                        },\n                        domProps: { value: _vm.property.Society },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.property,\n                              \"Society\",\n                              $event.target.value.trim()\n                            )\n                          },\n                          blur: function($event) {\n                            _vm.$forceUpdate()\n                          }\n                        }\n                      }),\n                      _c(\n                        \"span\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value: _vm.errors.has(\"Society\"),\n                              expression: \"errors.has('Society')\"\n                            }\n                          ],\n                          staticClass: \"errormsg\"\n                        },\n                        [_vm._v(_vm._s(_vm.errors.first(\"Society\")))]\n                      )\n                    ])\n                  ])\n                ])\n              ]),\n              _c(\"div\", { staticClass: \"row marzero0\" }, [\n                _c(\"div\", { staticClass: \"col-sm-6\" }, [\n                  _c(\"div\", { staticClass: \"form-group custrespformgrop\" }, [\n                    _c(\"label\", { staticClass: \"lblcustm\" }, [\n                      _vm._v(\"Area :\")\n                    ]),\n                    _c(\"p\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model.trim\",\n                            value: _vm.property.Area,\n                            expression: \"property.Area\",\n                            modifiers: { trim: true }\n                          },\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: {\n                              required: true,\n                              regex: /^[A-za-z0-9\\s\\-\\/]+$/\n                            },\n                            expression:\n                              \"{ required: true, regex: /^[A-za-z0-9\\\\s\\\\-\\\\/]+$/ }\"\n                          }\n                        ],\n                        staticClass: \"form-control step_1\",\n                        class: { invalid: _vm.errors.has(\"Area\") },\n                        attrs: {\n                          \"data-vv-validate-on\": \"blur\",\n                          name: \"Area\",\n                          type: \"text\"\n                        },\n                        domProps: { value: _vm.property.Area },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.property,\n                              \"Area\",\n                              $event.target.value.trim()\n                            )\n                          },\n                          blur: function($event) {\n                            _vm.$forceUpdate()\n                          }\n                        }\n                      }),\n                      _c(\n                        \"span\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value: _vm.errors.has(\"Area\"),\n                              expression: \"errors.has('Area')\"\n                            }\n                          ],\n                          staticClass: \"errormsg\"\n                        },\n                        [_vm._v(_vm._s(_vm.errors.first(\"Area\")))]\n                      )\n                    ])\n                  ])\n                ]),\n                _c(\"div\", { staticClass: \"col-sm-6\" }, [\n                  _c(\"div\", { staticClass: \"form-group custrespformgrop\" }, [\n                    _c(\"label\", { staticClass: \"lblcustm\" }, [\n                      _vm._v(\"City :\")\n                    ]),\n                    _c(\"p\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model.trim\",\n                            value: _vm.property.City,\n                            expression: \"property.City\",\n                            modifiers: { trim: true }\n                          },\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: {\n                              required: true,\n                              regex: /^[A-za-z0-9\\s\\-\\/]+$/\n                            },\n                            expression:\n                              \"{ required: true, regex: /^[A-za-z0-9\\\\s\\\\-\\\\/]+$/ }\"\n                          }\n                        ],\n                        staticClass: \"form-control step_1\",\n                        class: { invalid: _vm.errors.has(\"City\") },\n                        attrs: {\n                          \"data-vv-validate-on\": \"blur\",\n                          name: \"City\",\n                          type: \"text\"\n                        },\n                        domProps: { value: _vm.property.City },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.property,\n                              \"City\",\n                              $event.target.value.trim()\n                            )\n                          },\n                          blur: function($event) {\n                            _vm.$forceUpdate()\n                          }\n                        }\n                      }),\n                      _c(\n                        \"span\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value: _vm.errors.has(\"City\"),\n                              expression: \"errors.has('City')\"\n                            }\n                          ],\n                          staticClass: \"errormsg\"\n                        },\n                        [_vm._v(_vm._s(_vm.errors.first(\"City\")))]\n                      )\n                    ])\n                  ])\n                ])\n              ]),\n              _c(\"div\", { staticClass: \"row marzero0\" }, [\n                _c(\"div\", { staticClass: \"col-sm-6\" }, [\n                  _c(\"div\", { staticClass: \"form-group custrespformgrop\" }, [\n                    _c(\"label\", { staticClass: \"lblcustm\" }, [\n                      _vm._v(\"State :\")\n                    ]),\n                    _c(\"p\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model.trim\",\n                            value: _vm.property.State,\n                            expression: \"property.State\",\n                            modifiers: { trim: true }\n                          },\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: {\n                              required: true,\n                              regex: /^[A-za-z\\s\\-\\/]+$/\n                            },\n                            expression:\n                              \"{ required: true, regex: /^[A-za-z\\\\s\\\\-\\\\/]+$/ }\"\n                          }\n                        ],\n                        staticClass: \"form-control step_1\",\n                        class: { invalid: _vm.errors.has(\"State\") },\n                        attrs: {\n                          \"data-vv-validate-on\": \"blur\",\n                          name: \"State\",\n                          type: \"text\"\n                        },\n                        domProps: { value: _vm.property.State },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.property,\n                              \"State\",\n                              $event.target.value.trim()\n                            )\n                          },\n                          blur: function($event) {\n                            _vm.$forceUpdate()\n                          }\n                        }\n                      }),\n                      _c(\n                        \"span\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value: _vm.errors.has(\"State\"),\n                              expression: \"errors.has('State')\"\n                            }\n                          ],\n                          staticClass: \"errormsg\"\n                        },\n                        [_vm._v(_vm._s(_vm.errors.first(\"State\")))]\n                      )\n                    ])\n                  ])\n                ]),\n                _c(\"div\", { staticClass: \"col-sm-6\" }, [\n                  _c(\"div\", { staticClass: \"form-group custrespformgrop\" }, [\n                    _c(\"label\", { staticClass: \"lblcustm\" }, [_vm._v(\"Pin :\")]),\n                    _c(\"p\", [\n                      _c(\"input\", {\n                        directives: [\n                          {\n                            name: \"model\",\n                            rawName: \"v-model.trim\",\n                            value: _vm.property.Pin,\n                            expression: \"property.Pin\",\n                            modifiers: { trim: true }\n                          },\n                          {\n                            name: \"validate\",\n                            rawName: \"v-validate\",\n                            value: \"required|digits:6\",\n                            expression: \"'required|digits:6'\"\n                          }\n                        ],\n                        staticClass: \"form-control step_1\",\n                        class: { invalid: _vm.errors.has(\"Pin\") },\n                        attrs: {\n                          \"data-vv-validate-on\": \"blur\",\n                          placeholder: \"xxxxxx\",\n                          name: \"Pin\",\n                          type: \"text\"\n                        },\n                        domProps: { value: _vm.property.Pin },\n                        on: {\n                          input: function($event) {\n                            if ($event.target.composing) {\n                              return\n                            }\n                            _vm.$set(\n                              _vm.property,\n                              \"Pin\",\n                              $event.target.value.trim()\n                            )\n                          },\n                          blur: function($event) {\n                            _vm.$forceUpdate()\n                          }\n                        }\n                      }),\n                      _c(\n                        \"span\",\n                        {\n                          directives: [\n                            {\n                              name: \"show\",\n                              rawName: \"v-show\",\n                              value: _vm.errors.has(\"Pin\"),\n                              expression: \"errors.has('Pin')\"\n                            }\n                          ],\n                          staticClass: \"errormsg\"\n                        },\n                        [_vm._v(_vm._s(_vm.errors.first(\"Pin\")))]\n                      )\n                    ])\n                  ])\n                ])\n              ]),\n              _c(\n                \"div\",\n                {\n                  staticClass: \"row marzero0\",\n                  staticStyle: { \"margin-bottom\": \"20px\" }\n                },\n                [\n                  _c(\n                    \"div\",\n                    { staticClass: \"maxbtnwid pull-right\" },\n                    [\n                      _vm._m(5),\n                      _c(\n                        \"router-link\",\n                        {\n                          staticClass: \"link\",\n                          attrs: { to: { name: \"propertydetails\" } }\n                        },\n                        [\n                          _c(\"div\", { staticClass: \"col-xs-6\" }, [\n                            _c(\n                              \"button\",\n                              {\n                                staticClass: \"btn btn-info custbtnn2\",\n                                attrs: { type: \"button\" }\n                              },\n                              [_vm._v(\"Cancel\")]\n                            )\n                          ])\n                        ]\n                      )\n                    ],\n                    1\n                  )\n                ]\n              )\n            ]),\n            _c(\"hr\", { staticStyle: { \"border-color\": \"#EEEEEE\" } }),\n            _c(\n              \"p\",\n              {\n                staticStyle: {\n                  \"font-size\": \"12px\",\n                  color: \"#B0BEC5\",\n                  \"text-align\": \"center\"\n                }\n              },\n              [_vm._v(\"© Copyright 2015-2018 Paymatrix. All Rights Reserved.\")]\n            )\n          ]\n        )\n      ])\n    ])\n  ])\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"mar0_15\" }, [\n      _c(\n        \"span\",\n        { staticClass: \"fonweigh700\", staticStyle: { float: \"right\" } },\n        [_c(\"a\", [_c(\"i\", { staticClass: \"fas fa-times\" })])]\n      ),\n      _c(\"h4\", { staticClass: \"fonweigh700\" }, [\n        _vm._v(\"Edit property details\")\n      ]),\n      _c(\"hr\", { staticStyle: { \"border-color\": \"#EEEEEE\" } })\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"label\", { staticClass: \"radiolabel\", attrs: { for: \"sec1\" } }, [\n      _c(\"span\", [_c(\"span\")]),\n      _vm._v(\"Yes\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"label\", { staticClass: \"radiolabel\", attrs: { for: \"sec2\" } }, [\n      _c(\"span\", [_c(\"span\")]),\n      _vm._v(\"No\")\n    ])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\n      \"span\",\n      {\n        staticClass: \"file-msg js-set-number\",\n        staticStyle: { color: \"#808080\", \"font-size\": \"16px\" }\n      },\n      [\n        _vm._v(\"Click or Drop files \"),\n        _c(\"span\", { staticStyle: { color: \"#0071bc\" } }, [_vm._v(\"here\")])\n      ]\n    )\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"small\", [_c(\"p\", [_vm._v(\"File Uploaded \")])])\n  },\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"col-xs-6\" }, [\n      _c(\n        \"button\",\n        { staticClass: \"btn btn-info custbtnn\", attrs: { type: \"submit\" } },\n        [_vm._v(\"Update\")]\n      )\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}